#!/bin/busybox sh
# vim: set ft=sh:

# Normally, ROOT_DIR is empty. For testing export and set it pointing to initramfs rootfs dir.
. $ROOT_DIR/etc/unlocker.conf
. $ROOT_DIR/lib/init-scripts/functions

BOOT_DIR="$ROOT_DIR/mnt/boot"
BOOT_NEXT=""
BOOT_QUIET=1
BOOT_REORDER_EFI=0

cl_reset="\x1b[0m"
cl_num="\x1b[1;37;41m"  # white on red bg
cl_opt="\x1b[1;32m"     # green
cl_desc="\x1b[1;33m"    # yellow


mount_boot_fs() {
	mountpoint -q "$BOOT_DIR" && return  # check if already mounted
	mount -o ro "$UC_BOOT_PARTITION" "$BOOT_DIR" || panic "Unable to mount kernel partition"
}

umount_boot_fs() {
	mountpoint -q "$BOOT_DIR" || return  # check if already unmounted
	umount "$BOOT_DIR"
}


# checks current EFI Boot Index, and sets BOOT_NEXT to proper UC_BOOT_XXYY entry from config
# for it or ask when not found / advanced selection requested
check_current_boot_num() {
	if [ -f /tmp/do.advanced_selection ]; then
		BOOT_NEXT="ask"
		return 0
	fi

	local bootnum="$(efibootmgr | grep '^BootCurrent' | cut -f2 -d' ' | tr a-z A-Z)"
	[ $? -ne 0 ] && return 1
	[ -z "$bootnum" ] && return 2

	eval local next="\$UC_BOOT_$bootnum"
	[ $? -ne 0 ] && return 3
	[ -z "$next" ] && next="ask"

	BOOT_NEXT="$next"
}


prepare_boot_list() {
	local cnt=0
	local bootnum bootline opt desc
	: >/tmp/boot.opts
	echo "Select boot entry:" >/tmp/boot.menu

	# find possible kernels
	mount_boot_fs
	find "$BOOT_DIR" -name 'vmlinuz*' -a \( -type f -o -type l \) | sort | sed -re "s@$BOOT_DIR/?@/@" | while read opt; do
		cnt=$((cnt+1))
		if [ -L "$BOOT_DIR/$opt" ]; then
			echo -e "$cl_num$cnt$cl_reset) $cl_opt$opt$cl_reset -> $cl_desc$(readlink "$BOOT_DIR/$opt")$cl_reset" >>/tmp/boot.menu
		else
			echo -e "$cl_num$cnt$cl_reset) $cl_opt$opt$cl_reset" >>/tmp/boot.menu
		fi
		echo "$opt" >>/tmp/boot.opts
	done

	# reevaluate index; it does not get propagate from while sub-shell...
	cnt="$(wc -l /tmp/boot.opts | cut -d' ' -f1)"

	# find possible EFI BootNum targets (order by BootOrder)
	efibootmgr -v | sed -rne 's/^Boot([0-9A-F][0-9A-F][0-9A-F][0-9A-F])\* (.*)[[:space:]]+HD\(.*File\(.*$/EFI:\1 \2/p' | sort >/tmp/boot.efi
	for bootnum in $(efibootmgr | grep BootOrder | cut -d' ' -f2- | sed 's/,/ /g'); do
		bootline="$(grep "^EFI:$bootnum " /tmp/boot.efi)"
		[ $? -ne 0 ] && continue
		[ -z "$bootline" ] && continue
		opt="$(echo "$bootline" | cut -d' ' -f1)"
		desc="$(echo "$bootline" | cut -d' ' -f2-)"
		cnt=$((cnt+1))
		echo -e "$cl_num$cnt$cl_reset) $cl_opt$opt$cl_reset -> $cl_desc$desc$cl_reset" >>/tmp/boot.menu
		echo "$opt" >>/tmp/boot.opts
	done
	echo >>/tmp/boot.menu
	rm -f /tmp/boot.efi
}

select_next_kernel() {
	# redir stdout to stderr so we don't return some garbage by accident
	exec 42>&1
	exec 1>&2

	# prepare: stop splash, disable tty signal handling so there's no way
	# to stop this script from inside other than choosing a valid option, enable numlock
	plymouth hide-splash
	plymouth quit
	stty intr ^- quit ^- start ^- stop ^- susp ^-
	setleds -D +num 1>/dev/null 2>&1

	# offer options and get the answer
	prepare_boot_list
	local answer=""
	local choice=""
	local once=0
	while [ -z "$choice" ]; do
		clear
		[ $once -eq 0 ] && once=1 || echo -e "Wrong answer; enter a valid number only!\n"
		cat /tmp/boot.menu
		read -p "Your choice (number): " answer
		# answer must contain digits only
		answer="$(echo "$answer" | sed -n -r -e "/^[0-9]+$/p")"
		[ -n "$answer" ] || continue
		# 0 not allowed
		[ $answer -ge 1 ] || continue
		# use sed to cut selected option line from the file
		choice="$(sed -n -e "$answer,$answer p" -e "$answer q" /tmp/boot.opts)"
		# when we've got the line, we're done!
	done

	# ask supplementary questions
	if [ "${choice:0:4}" == "EFI:" ]; then
		# if not first EFI entry, offer option to reorder chosen entry
		if [ "$choice" != "$(grep -m 1 '^EFI:' /tmp/boot.opts)" ]; then
			read -p "Reorder EFI entries to put your choice first next time? [y/N]: " answer
			if [ "${answer:0:1}" = "y" ] || [ "${answer:0:1}" = "Y" ]; then
				BOOT_REORDER_EFI=1
			fi
		fi
	else
		# by default we do "quiet splash" boot; offer option to disable that
		read -p "Do 'quiet splash' boot? [Y/n]: " answer
		if [ "${answer:0:1}" = "n" ] || [ ""$mdir/$UC_USB_KEY_FILE"${answer:0:1}" = "N" ]; then
			BOOT_QUIET=0
		fi
	fi

	# restore stdout and set the answer
	setleds -D -num 1>/dev/null 2>&1
	stty sane
	exec 1>&42 42>&-
	BOOT_NEXT="$choice"
}

setup_kexec() {
	local opt_quiet=""
	local opt_diskpass=""
	local pass_file_name="/etc/disk-$(basename "$UC_DISK_TO_UNLOCK").pass"
	mount_boot_fs

	[ $BOOT_QUIET -ne 0 ] && opt_quiet="--append=quiet splash"

	if [ "$UC_PASS_UNLOCK_CREDS" -eq "1" ] && [ -f "/tmp/disk.pass" ]; then
		mv "/tmp/disk.pass" "$pass_file_name"
		echo -ne "$(dirname "$pass_file_name")\n$pass_file_name\n" | cpio -o --format=newc >"/tmp/disk.pass.cpio"
		opt_diskpass="--initrd=/tmp/disk.pass.cpio"
	fi

	kexec -s -l "$BOOT_DIR/$BOOT_NEXT" "$opt_quiet" "$opt_diskpass" || panic "Failed to load next kernel"

	if [ "$UC_PASS_UNLOCK_CREDS" -eq "1" ]; then
		shred -n 3 -z -u "$pass_file_name" 1>/dev/null 2>&1
		shred -n 3 -z -u "/tmp/disk.pass" 1>/dev/null 2>&1
		shred -n 3 -z -u "/tmp/disk.pass.cpio" 1>/dev/null 2>&1
	fi

	echo 'kexec -e' >/tmp/reboot.cmd
}

setup_efi_reboot() {
	local bootnum="${BOOT_NEXT:4}"
	if [ $BOOT_REORDER_EFI -eq 1 ]; then
		# this is quite easy cause reorder is offered only when the entry is not first yet
		local bootorder="$bootnum,$(efibootmgr | grep BootOrder | cut -d' ' -f2- | sed "s/,$bootnum//g")"
		efibootmgr -q -o "$bootorder" || panic "Failed to set EFI BootOrder"
	else
		efibootmgr -q -n "$bootnum" || panic "Failed to set EFI BootNext"
	fi
	echo 'reboot -f' >/tmp/reboot.cmd
}


# main logic
check_current_boot_num
[ $? -eq 0 ] || panic "Failed to get current BootNum"

if [ "$BOOT_NEXT" = "ask" ]; then
	select_next_kernel
	[ $? -eq 0 ] || panic "Failed to select next kernel"
fi

echo
echo "Selected $BOOT_NEXT"
if [ "${BOOT_NEXT:0:4}" == "EFI:" ]; then
	setup_efi_reboot
	ret=$?
else
	setup_kexec
	ret=$?
fi

umount_boot_fs
exit $?
